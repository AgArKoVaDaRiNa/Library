// <auto-generated />
using System;
using Library1;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Library1.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20211112102111_AuthorAgeAdded")]
    partial class AuthorAgeAdded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Library1.Author", b =>
                {
                    b.Property<int>("IdAuthor")
                        .HasColumnType("int");

                    b.Property<int>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdAuthor")
                        .HasName("PK_Library_IdAuthor");

                    b.ToTable("Author", (string)null);
                });

            modelBuilder.Entity("Library1.AuthorsBook", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("IdAuthor")
                        .HasColumnType("int");

                    b.HasKey("IdBook", "IdAuthor")
                        .HasName("PK__Authors __7D80ACA9E1C8E282");

                    b.ToTable("Authors books", (string)null);
                });

            modelBuilder.Entity("Library1.Book", b =>
                {
                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<string>("BookGenre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("BookSTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Book`sTitle");

                    b.Property<int>("BooksInStock")
                        .HasColumnType("int");

                    b.Property<int>("IdPublisher")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublicationDate")
                        .HasColumnType("date");

                    b.Property<int>("RackNumber")
                        .HasColumnType("int");

                    b.HasKey("IdBook")
                        .HasName("PK_Library_IdBook");

                    b.HasIndex("IdPublisher");

                    b.ToTable("Book", (string)null);
                });

            modelBuilder.Entity("Library1.BooksAndClient", b =>
                {
                    b.Property<int>("Books")
                        .HasColumnType("int");

                    b.Property<string>("Clients")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.ToView("BooksAndClients");
                });

            modelBuilder.Entity("Library1.BooksAndClients1", b =>
                {
                    b.Property<int>("Books")
                        .HasColumnType("int");

                    b.Property<string>("Clients")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.ToView("BooksAndClients1");
                });

            modelBuilder.Entity("Library1.BooksAndClients2", b =>
                {
                    b.Property<string>("Books")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Clients")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.ToView("BooksAndClients2");
                });

            modelBuilder.Entity("Library1.BuyingBook", b =>
                {
                    b.Property<int>("IdBuying")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBuying"), 1L, 1);

                    b.Property<string>("Buying")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.HasKey("IdBuying")
                        .HasName("PK__BuyingBo__57D2F209DE8B724F");

                    b.ToTable("BuyingBook", (string)null);
                });

            modelBuilder.Entity("Library1.CopyOfTheBook", b =>
                {
                    b.Property<int>("IdCopy")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.HasKey("IdCopy")
                        .HasName("PK_Library_IdCopy");

                    b.HasIndex("IdBook");

                    b.ToTable("CopyOfTheBook", (string)null);
                });

            modelBuilder.Entity("Library1.IssuingBook", b =>
                {
                    b.Property<int>("IdIssuance")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCopy")
                        .HasColumnType("int");

                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<int>("IdLibraryCard")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime");

                    b.HasKey("IdIssuance")
                        .HasName("PK_Library_IdIssuance");

                    b.HasIndex("IdCopy");

                    b.HasIndex("IdEmployee");

                    b.HasIndex("IdLibraryCard");

                    b.ToTable("IssuingBooks");
                });

            modelBuilder.Entity("Library1.LibraryCard", b =>
                {
                    b.Property<int>("IdLibraryCard")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("ReaderSAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Reader`sAddress");

                    b.Property<DateTime>("ReaderSDateOfBirth")
                        .HasColumnType("datetime")
                        .HasColumnName("Reader`sDateOfBirth");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdLibraryCard")
                        .HasName("PK_Library_IdLibraryCard");

                    b.ToTable("LibraryCard", (string)null);
                });

            modelBuilder.Entity("Library1.LibraryEmployee", b =>
                {
                    b.Property<int>("IdEmployee")
                        .HasColumnType("int");

                    b.Property<string>("BookDepartment")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdEmployee")
                        .HasName("PK_Library_IdEmployee");

                    b.ToTable("LibraryEmployee", (string)null);
                });

            modelBuilder.Entity("Library1.Periodical", b =>
                {
                    b.Property<int>("IdEdition")
                        .HasColumnType("int");

                    b.Property<DateTime>("EditionDate")
                        .HasColumnType("datetime");

                    b.Property<int>("EditionNumber")
                        .HasColumnType("int");

                    b.Property<string>("EditionTitle")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("IdPublisher")
                        .HasColumnType("int");

                    b.Property<string>("ReadingPlace")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IdEdition")
                        .HasName("PK_Library_IdEdition");

                    b.HasIndex("IdPublisher");

                    b.ToTable("Periodicals");
                });

            modelBuilder.Entity("Library1.Publisher", b =>
                {
                    b.Property<int>("IdPublisher")
                        .HasColumnType("int");

                    b.Property<string>("PublisherAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PublisherName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PublishingCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("IdPublisher")
                        .HasName("PK_Library_IdPublisher");

                    b.ToTable("Publisher", (string)null);
                });

            modelBuilder.Entity("Library1.Reservation", b =>
                {
                    b.Property<int>("IdReservation")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.Property<int>("IdLibraryCard")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReservationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("IdReservation")
                        .HasName("PK_Linbrary_IdReservation");

                    b.HasIndex("IdBook");

                    b.HasIndex("IdLibraryCard");

                    b.ToTable("Reservation", (string)null);
                });

            modelBuilder.Entity("Library1.ReservationIssuance", b =>
                {
                    b.Property<int>("IdIssuance")
                        .HasColumnType("int");

                    b.Property<int>("IdReservation")
                        .HasColumnType("int");

                    b.HasKey("IdIssuance", "IdReservation")
                        .HasName("PK__Reservat__1B111D51050AECDE");

                    b.ToTable("ReservationIssuance", (string)null);
                });

            modelBuilder.Entity("Library1.SetOfBook", b =>
                {
                    b.Property<int>("IdReservation")
                        .HasColumnType("int");

                    b.Property<int>("IdBook")
                        .HasColumnType("int");

                    b.HasKey("IdReservation", "IdBook")
                        .HasName("PK__SetOfBoo__DC1CC9C6FDA60E13");

                    b.ToTable("SetOfBook", (string)null);
                });

            modelBuilder.Entity("Library1.Book", b =>
                {
                    b.HasOne("Library1.Publisher", "IdPublisherNavigation")
                        .WithMany("Books")
                        .HasForeignKey("IdPublisher")
                        .IsRequired()
                        .HasConstraintName("FK_Library_IdPublisher");

                    b.Navigation("IdPublisherNavigation");
                });

            modelBuilder.Entity("Library1.CopyOfTheBook", b =>
                {
                    b.HasOne("Library1.Book", "IdBookNavigation")
                        .WithMany("CopyOfTheBooks")
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK_Library_IdBook");

                    b.Navigation("IdBookNavigation");
                });

            modelBuilder.Entity("Library1.IssuingBook", b =>
                {
                    b.HasOne("Library1.CopyOfTheBook", "IdCopyNavigation")
                        .WithMany("IssuingBooks")
                        .HasForeignKey("IdCopy")
                        .IsRequired()
                        .HasConstraintName("FK_Library_IdCopy");

                    b.HasOne("Library1.LibraryEmployee", "IdEmployeeNavigation")
                        .WithMany("IssuingBooks")
                        .HasForeignKey("IdEmployee")
                        .IsRequired()
                        .HasConstraintName("FK_Library_IdEmployee");

                    b.HasOne("Library1.LibraryCard", "IdLibraryCardNavigation")
                        .WithMany("IssuingBooks")
                        .HasForeignKey("IdLibraryCard")
                        .IsRequired()
                        .HasConstraintName("FK_Library_IdLibraryCard");

                    b.Navigation("IdCopyNavigation");

                    b.Navigation("IdEmployeeNavigation");

                    b.Navigation("IdLibraryCardNavigation");
                });

            modelBuilder.Entity("Library1.Periodical", b =>
                {
                    b.HasOne("Library1.Publisher", "IdPublisherNavigation")
                        .WithMany("Periodicals")
                        .HasForeignKey("IdPublisher")
                        .IsRequired()
                        .HasConstraintName("FK_Library_Publisher_Periodicals");

                    b.Navigation("IdPublisherNavigation");
                });

            modelBuilder.Entity("Library1.Reservation", b =>
                {
                    b.HasOne("Library1.Book", "IdBookNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdBook")
                        .IsRequired()
                        .HasConstraintName("FK_Library_IdBook_Reservation");

                    b.HasOne("Library1.LibraryCard", "IdLibraryCardNavigation")
                        .WithMany("Reservations")
                        .HasForeignKey("IdLibraryCard")
                        .IsRequired()
                        .HasConstraintName("FK_Library_LibraryCard_Reservation");

                    b.Navigation("IdBookNavigation");

                    b.Navigation("IdLibraryCardNavigation");
                });

            modelBuilder.Entity("Library1.Book", b =>
                {
                    b.Navigation("CopyOfTheBooks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Library1.CopyOfTheBook", b =>
                {
                    b.Navigation("IssuingBooks");
                });

            modelBuilder.Entity("Library1.LibraryCard", b =>
                {
                    b.Navigation("IssuingBooks");

                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Library1.LibraryEmployee", b =>
                {
                    b.Navigation("IssuingBooks");
                });

            modelBuilder.Entity("Library1.Publisher", b =>
                {
                    b.Navigation("Books");

                    b.Navigation("Periodicals");
                });
#pragma warning restore 612, 618
        }
    }
}
